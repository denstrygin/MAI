;coin21
(define (first-denomination kind-of-coins)
  (cond ((= kind-of-coins 1) 1))
  (cond ((= kind-of-coins 2) 3))
  (cond ((= kind-of-coins 3) 15))
  (cond ((= kind-of-coins 4) 20))
  (cond ((= kind-of-coins 5) 25))
  (cond ((= kind-of-coins 6) 50)
        (else 0))
)
(define (count-change amount)
  (display"______\n amount: ")
  (display amount)
  (newline)
  (display"KIND-OF-COINS: ")
  (display KINDS-OF-COINS)
  (newline)
  (let ((largest-coin (first-denomination KINDS-OF-COINS)))
     (display "largest-coin: ")
     (display largest-coin)
     (newline)
     (cond ((and (< 0 amount) (< 0 KINDS-OF-COINS) (< 0 largest-coin))
            (display "List of coinsdenominations: ")
            (denomination-list KINDS-OF-COINS)
            (display "count-change= ")
            (cc amount KINDS-OF-COINS))
     (else (display "Improper parameter value!\ncount-change= ") -1)
     )
  )
)
(define (pier? x? y?)
  (not (or x? y?))
)
(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((pier? (< amount 0) (= kinds-of-coins 0)) 
                (+ (cc amount (- kinds-of-coins 1))
                (cc (- amount (first-denomination kinds-of-coins)) kinds-of-coins)))
        (else 0)
    )
)
(define (denomination-list kinds-of-coins)
  (cond ((= kinds-of-coins 0) (newline) 0)
  (else (display (first-denomination kinds-of-coins)) (display " ") (denomination-list (- kinds-of-coins 1)))
  )
)
(define (GR-AMOUNT)
  (remainder (+ (* 100 LAST-DIGIT-OF-GROUP-NUMBER)) 231)
)
(define VARIANT 25)
(define LAST-DIGIT-OF-GROUP-NUMBER 6)
(define KINDS-OF-COINS 6)
(display "Variant ")
VARIANT
(newline)
(display (count-change 100))
(newline)
(display (count-change (GR-AMOUNT)))(newline)
(set! KINDS-OF-COINS 13)
(display (count-change 100))
(newline)
(display "(c) Strygin D.D. 2021\n")