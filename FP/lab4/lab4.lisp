(defun russian-upper-case-p (char)
        (position char "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ")
)

(defun russian-char-downcase (char)
        (let ((i (russian-upper-case-p char)))
                (if i 
                        (char "абвгдеёжзийклмнопрстуфхцчшщъыьэюя" i)
                        (char-downcase char)
                )
        )
)

(defun russian-char-equal (char1 char2)
        (char-equal (russian-char-downcase char1)
              (russian-char-downcase char2)
        )
)

(defun compress-word (str)
        (let ((answer (make-string 4)) (step 0) (flag 0))
                (loop with n = (length str)
                        for i upfrom 0 below n do
                                (when (eq i 0)
                                        (setf (char answer step) (char str i))
                                        (setf step (1+ step))
                                )
                                (when (and (< step 4) (not (eq i 0)) (not (or 
                                                (russian-char-equal (char str i) #\а)
                                                (russian-char-equal (char str i) #\е)
                                                (russian-char-equal (char str i) #\ё)
                                                (russian-char-equal (char str i) #\и)
                                                (russian-char-equal (char str i) #\о)
                                                (russian-char-equal (char str i) #\у)
                                                (russian-char-equal (char str i) #\ы)
                                                (russian-char-equal (char str i) #\э)
                                                (russian-char-equal (char str i) #\ю)
                                                (russian-char-equal (char str i) #\я)
                                                (russian-char-equal (char str i) #\ь)
                                                (russian-char-equal (char str i) #\ъ))))    
                                        (if (eq flag 1)
                                                (setf flag 0)
                                                (if (< i (1- (length str)))
                                                        (when (eq flag 0) 
                                                                (when (russian-char-equal (char str i) (char str (1+ i)))
                                                                        (setf (char answer step) (char str i))
                                                                        (setf step (1+ step))
                                                                        (setf flag 1)
                                                                )
                                                                (when (not (russian-char-equal (char str i) (char str (1+ i))))
                                                                        (setf (char answer step) (char str i))
                                                                        (setf step (1+ step))
                                                                )
                                                        )
                                                        (setf (char answer step) (char str i))
                                                )
                                        )
                                )
                )
                answer
        )
)